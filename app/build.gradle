apply plugin: 'com.android.application'
apply from: 'quality.gradle'

def externalPrivateVersion = new File(project.rootDir.path + "/app/external_version_code.txt").text.trim().toInteger()
def externalPublicVersion = new File(project.rootDir.path + "/app/external_version_name.txt").text.trim()
def internalPrivateVersion = new File(project.rootDir.path + "/app/internal_version_code.txt").text.trim().toInteger()
def internalPublicVersion = new File(project.rootDir.path + "/app/internal_version_name.txt").text.trim()
def isCircle = "true" == System.getenv("CIRCLECI")

ext.signing = [
    storeFilePath: "path/to/keystore",
    storePassword: "keystore password",
    keyAlias     : "key alias",
    keyPassword  : "key password"
]

if (file('signing.gradle').exists()) {
    apply from: 'signing.gradle'
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.kickstarter"
        minSdkVersion 17
        targetSdkVersion 25
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GIT_SHA", "\"${commitSha()}\""
        buildConfigField "String", "BUILD_DATE", "\"${commitTime()}\""

        // Enable Multidex to support over 65K methods
        multiDexEnabled true

        // allow for multiple language fallbacks
        resConfigs "auto"
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
        release {
            storeFile file(project.signing.storeFilePath)
            storePassword project.signing.storePassword
            keyAlias project.signing.keyAlias
            keyPassword project.signing.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            if (isCircle) {
                // The release build generated on CircleCI doesn't need to be signed with our real
                // keystore - we just need a release build to verify that it compiles. Using the
                // debug keystore means we don't have to expose our keystore.
                signingConfig signingConfigs.debug
            } else {
                signingConfig signingConfigs.release
            }
        }
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "AUDIENCE", "API"

    productFlavors {
        pre21 {
            dimension "API"
            // Don't override the minSdkVersion, just inherit from defaultConfig
        }
        min21 {
            // minSdkVersion 21 speeds up local development by generating multidex output much faster.
            // It should not be used for release builds. See:
            // https://developer.android.com/tools/building/multidex.html#dev-build
            dimension "API"
            minSdkVersion 21
        }
        internal {
            dimension "AUDIENCE"
            applicationId "com.kickstarter.kickstarter.internal"
            versionCode internalPrivateVersion
            versionName internalPublicVersion
        }
        external {
            dimension "AUDIENCE"
            applicationId "com.kickstarter.kickstarter"
            versionCode externalPrivateVersion
            versionName externalPublicVersion
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Fixes build error hitting GC overhead limit
    dexOptions {
        javaMaxHeapSize "3072M"
    }

    lintOptions {
        quiet true
        warningsAsErrors true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }

    sourceSets {
        androidTest {
            java.srcDir file('src/androidTest')
        }
        main.java.srcDirs += 'src/main/kotlin'
    }
}

repositories {
    jcenter()
    maven {
        url 'https://maven.google.com'
    }
}

// library versions
final auto_parcel_version = "0.3.1"
final butterknife_version = "7.0.1"
final constraint_layout_version = "1.0.2"
final dagger_version = "2.8"
final exoplayer_version = "2.7.0"
final facebook_version = "4.7.0"
final hockey_version = "5.0.0"
final joda_time_version = "2.7.2"
final jsoup_version = "1.8.2"
final leak_canary_version = "1.3.1"
final mixpanel_version = "4.6.4"
final mockito_version = "1.10.19"
final okhttp_version = "3.5.0"
final picasso_version = "2.5.2"
final phoenix_version = "1.0.2"
final play_services_version = "10.0.1"
final retrofit_version = "2.2.0"
final robolectrict_version = "3.0"
final rx_android_version = "1.2.0"
final rx_binding_version = "0.3.0"
final rx_java_version = "1.1.5"
final rx_lifecycle_version = "0.3.0"
final stripe_version = "1.0.3"
final support_version = "25.1.0"
final timber_version = "3.0.1"



dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:cardview-v7:$support_version"
    compile "com.android.support:design:$support_version"
    compile 'com.android.support:multidex:1.0.1'
    compile "com.android.support:recyclerview-v7:$support_version"
    compile "com.android.support:support-annotations:$support_version"
    compile "com.facebook.android:facebook-android-sdk:$facebook_version"
    compile "com.github.frankiesardo:auto-parcel:$auto_parcel_version"
    annotationProcessor "com.github.frankiesardo:auto-parcel-processor:$auto_parcel_version"
    compile "com.google.android.gms:play-services-auth:$play_services_version"
    compile "com.google.android.gms:play-services-gcm:$play_services_version"
    compile "com.google.android.gms:play-services-wallet:$play_services_version"
    compile "com.google.android.exoplayer:exoplayer:$exoplayer_version"
    compile "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    compile "com.jakewharton:butterknife:$butterknife_version"
    compile "com.jakewharton:process-phoenix:$phoenix_version"
    compile "com.jakewharton.timber:timber:$timber_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "com.stripe:stripe-android:$stripe_version"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    compile "com.squareup.okhttp3:okhttp-urlconnection:$okhttp_version"
    compile "com.squareup.picasso:picasso:$picasso_version"
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.trello:rxlifecycle:$rx_lifecycle_version"
    compile "com.trello:rxlifecycle-components:$rx_lifecycle_version"
    compile "io.reactivex:rxandroid:$rx_android_version"
    compile "io.reactivex:rxjava:$rx_java_version"
    compile "com.jakewharton.rxbinding:rxbinding:$rx_binding_version"
    compile "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$rx_binding_version"
    compile "com.jakewharton.rxbinding:rxbinding-support-v4:$rx_binding_version"
    compile "net.danlew:android.joda:$joda_time_version"
    compile "net.hockeyapp.android:HockeySDK:$hockey_version"
    compile "org.jsoup:jsoup:$jsoup_version"
    compile "com.mixpanel.android:mixpanel-android:$mixpanel_version"
    compile "com.android.support.constraint:constraint-layout:$constraint_layout_version"

    // Testing
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:$mockito_version"
    testCompile "org.robolectric:robolectric:$robolectrict_version"
    testCompile "org.robolectric:shadows-multidex:$robolectrict_version"
    testCompile "org.robolectric:shadows-play-services:$robolectrict_version"
    testCompile "org.robolectric:shadows-support-v4:$robolectrict_version"
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support:support-annotations:27.0.0'
}

// SHA and timestamp caching courtesy of https://github.com/gdg-x/frisbee/blob/develop/app/build.gradle#L193-L218
def commitSha() {
    def file = new File(project.buildDir, "commit-sha.txt")
    if (file.exists()) {
        return file.text
    }

    def value = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

    file.parentFile.mkdirs()
    file.text = value
    return value
}

def commitTime() {
    def file = new File(project.buildDir, "commit-timestamp.txt")
    if (file.exists()) {
        return file.text
    }

    def date = new Date()
    def value = date.format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

    file.parentFile.mkdirs()
    file.text = value
    return value
}

buildscript {
    ext.kotlin_version = '1.1.2-5'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

// Copy google-services.json from variant directory to root of app
gradle.taskGraph.beforeTask { Task task ->
    if (task.name ==~ /process.*GoogleServices/) {
        android.applicationVariants.all { variant ->
            if (task.name ==~ /(?i)process${variant.name}GoogleServices/) {
                copy {
                    from "src/${variant.name}"
                    into '.'
                    include 'google-services.json'
                }
            }
        }
    }
}

apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
